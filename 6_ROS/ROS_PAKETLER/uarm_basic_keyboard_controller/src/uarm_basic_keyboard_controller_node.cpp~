#include"ros/ros.h"
#include"keyboard/Key.h"
#include"std_msgs/Int16.h"

ros::Publisher basePub;
ros::Publisher verticalPub;
ros::Publisher horizontalPub;

ros::Subscriber subKeyup;
ros::Subscriber subKeydown;

std_msgs::Int16 basePos = 90;
std_msgs::Int16 verticalPos = 90;
std_msgs::Int16 horizontalPos = 90;

ros::Timer baseTimer;
ros::Timer verticalTimer;
ros::Timer horizontalTimer;

bool isBaseIncrease;
bool isVerticalIncrease;
bool isHorizontalIncrease;

bool isBaseKeyPressed = false;
bool isVerticalKeyPressed = false;
bool isHorizontalKeyPressed = false;

void baseMove(){
	if(isBaseIncrease){
		if(basePos<180)
			basePos++;
		else
			basePos = 180;
	} else {
		if (basePos>0)
			basePos--;
		else
			basePos = 0;
	}
}
void verticalMove(){
	if(isVerticalIncrease){
                if(verticalPos<180)
                        verticalPos++;
                else
                        verticalPos = 180;
        } else {
                if (verticalPos>0)
                        verticalPos--;
                else
                        verticalPos = 0;
        }

}
void horizontalMove(){
	if(isHorizontalIncrease){
                if(horizontalPos<180)
                        horizontalPos++;
                else
                        horizontalPos = 180;
        } else {
                if (horizontalPos>0)
                        horizontalPos--;
                else
                        horizontalPos = 0;
        }
}

bool isAnyValidKeyDown()
{
}

void keyupMessageRecieved(const keyboard::Key& msg){
int keyCode = msg.code;
if (keyCode == msg.KEY_w || keyCode == msg.KEY_s) {
        verticalTimer.stop();
	isVerticalKeyPressed = false;
}  else if (keyCode == msg.KEY_a || keyCode == msg.KEY_d){
       	baseTimer.stop();
	isBaseKeyPressed = false;
} else if (keyCode == msg.KEY_e || keyCode == msg.KEY_q){
        horizontalTimer.stop();
	isHorizontalKeyPressed = false;
} else if (keyCode == msg.KEY_r){
        basePos = 90;
        verticalPos = 90;
        horizontalPos = 90;
	basePub.publish(basePos);
        verticalPub.publish(verticalPos);
        horizontalPub.publish(horizontalPos);
}
} 

void keydownMessageRecieved(const keyboard::Key& msg){
int keyCode = msg.code;
if (keyCode == msg.KEY_w) {
	isVerticalIncrease = true;
	isVerticalKeyPressed = true;
        verticalTimer.start();
} else if (keyCode == msg.KEY_s){
	isVerticalIncrease = false;
        isVerticalKeyPressed = true;
	verticalTimer.start();
} else if (keyCode == msg.KEY_a){
	isBaseIncrease = true;
	isBaseKeyPressed = true;
	baseTimer.start();
} else if (keyCode == msg.KEY_d){
	isBaseIncrease = false;
	isBaseKeyPressed = true;
        baseTimer.start();
} else if (keyCode == msg.KEY_e){
	horizontalIncrease = true;
	isHorizontalKeyPressed = true;
        horizontalTimer.start();
} else if (keyCode == msg.KEY_q){
	horizontalIncrease = false;
	isHorizontalKeyPressed = true;
        horizontalTimer.start();
} 
}

int main(int argc, char **argv){
ros::init(argc, argv, "uarm_basic_keyboard_controller_node");
ros::NodeHandle nh;

ros::Subscriber subKeydown = nh.subscribe("keydown", 1000, &keydownMessageRecieved);
ros::Subscriber subKeyup = nh.subscribe("keyup", 1000, &keyupMessageRecieved);

basePub = nh.advertise<std_msgs::Int16>("base",1000);
verticalPub = nh.advertise<std_msgs::Int16>("vertical",1000);
horizontalPub = nh.advertise<std_msgs::Int16>("horizontal",1000);

int publishRate;
int posIncreaseRate;
nh.param("uarmPublishRate",publishRate,5);
nh.param("uarmPoseRate",posIncreaseRate ,8);

baseTimer = nh.createTimer(ros::Duration(1/posIncreaseRate), &baseMove);
verticalTimer = nh.createTimer(ros::Duration(1/posIncreaseRate), &verticalMove);
horizontalTimer = nh.createTimer(ros::Duration(1/posIncreaseRate), &horizontalMove);

ros::Rate loop_rate(publishRate);
while (ros::ok())
{
if (isAnyValidKeyDown){
	basePub.publish(basePos);
	verticalPub.publish(verticalPos);
	horizontalPub.publish(horizontalPos);	
}
ros::spinOnce();
loop_rate.sleep();
}
}


